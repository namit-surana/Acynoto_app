import 'package:flutter/material.dart';
import '../../core/app_export.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    PrefUtils().setThemeData(_newTheme);
    Get.forceAppUpdate();
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: appTheme.whiteA700,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: colorScheme.primary,
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(8.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      radioTheme: RadioThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        side: BorderSide(
          width: 1,
        ),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      floatingActionButtonTheme: FloatingActionButtonThemeData(
        backgroundColor: appTheme.gray100,
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.gray300,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.black900,
          fontSize: 16.fSize,
          fontFamily: 'Lora',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.gray700,
          fontSize: 13.fSize,
          fontFamily: 'Lora',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.gray700,
          fontSize: 12.fSize,
          fontFamily: 'Lora',
          fontWeight: FontWeight.w400,
        ),
        displaySmall: TextStyle(
          color: appTheme.black900,
          fontSize: 34.fSize,
          fontFamily: 'Lora',
          fontWeight: FontWeight.w700,
        ),
        headlineMedium: TextStyle(
          color: appTheme.black900,
          fontSize: 28.fSize,
          fontFamily: 'Lora',
          fontWeight: FontWeight.w700,
        ),
        headlineSmall: TextStyle(
          color: appTheme.black900,
          fontSize: 24.fSize,
          fontFamily: 'Lora',
          fontWeight: FontWeight.w700,
        ),
        labelLarge: TextStyle(
          color: appTheme.black900,
          fontSize: 12.fSize,
          fontFamily: 'Lora',
          fontWeight: FontWeight.w700,
        ),
        titleLarge: TextStyle(
          color: appTheme.black900,
          fontSize: 20.fSize,
          fontFamily: 'Lora',
          fontWeight: FontWeight.w700,
        ),
        titleMedium: TextStyle(
          color: appTheme.green,
          fontSize: 18.fSize,
          fontFamily: 'Lora',
          fontWeight: FontWeight.w600,
        ),
        titleSmall: TextStyle(
          color: colorScheme.primary,
          fontSize: 14.fSize,
          fontFamily: 'Lora',
          fontWeight: FontWeight.w700,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF5892EC),
    primaryContainer: Color(0XFF2A2A2A),
    secondary: Color(0XFF2A2A2A),
    secondaryContainer: Color(0XFFFF814E),
    tertiary: Color(0XFF2A2A2A),
    tertiaryContainer: Color(0XFFFF814E),

    // Background colors
    background: Color(0XFF2A2A2A),

    // Surface colors
    surface: Color(0XFF2A2A2A),
    surfaceTint: Color(0XFF2A2A2A),
    surfaceVariant: Color(0XFFFF814E),

    // Error colors
    error: Color(0XFF2A2A2A),
    errorContainer: Color(0XFFFF814E),
    onError: Color(0XFFFFE3E3),
    onErrorContainer: Color(0XFF2A2A2A),

    // On colors(text colors)
    onBackground: Color(0XFFFFE3E3),
    onInverseSurface: Color(0XFFFFE3E3),
    onPrimary: Color(0XFF2A2A2A),
    onPrimaryContainer: Color(0XFFFFE3E3),
    onSecondary: Color(0XFFFFE3E3),
    onSecondaryContainer: Color(0XFF2A2A2A),
    onTertiary: Color(0XFFFFE3E3),
    onTertiaryContainer: Color(0XFF2A2A2A),

    // Other colors
    outline: Color(0XFF2A2A2A),
    outlineVariant: Color(0XFF2A2A2A),
    scrim: Color(0XFF2A2A2A),
    shadow: Color(0XFF2A2A2A),

    // Inverse colors
    inversePrimary: Color(0XFF2A2A2A),
    inverseSurface: Color(0XFF2A2A2A),

    // Pending colors
    onSurface: Color(0XFFFFE3E3),
    onSurfaceVariant: Color(0XFF2A2A2A),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amber500 => Color(0XFFFFC107);
  Color get amber50001 => Color(0XFFF4BA0C);

  // Black
  Color get black900 => Color(0XFF030401);
  Color get black90001 => Color(0XFF000000);

  // Blue
  Color get blue100 => Color(0XFFCDDCFA);
  Color get blue50 => Color(0XFFE5F1FA);
  Color get blue5001 => Color(0XFFDDEAFF);
  Color get blue800 => Color(0XFF226FA7);
  Color get blueA200 => Color(0XFF5186EE);

  // BlueGray
  Color get blueGray300 => Color(0XFFA3A3B5);
  Color get blueGray400 => Color(0XFF888888);

  // Cyan
  Color get cyan300 => Color(0XFF50C8E5);

  // DeepOrange
  Color get deepOrange200 => Color(0XFFF7B289);
  Color get deepOrange50 => Color(0XFFFEEBE2);

  // DeepPurple
  Color get deepPurple400 => Color(0XFF7E65C3);
  Color get deepPurple50 => Color(0XFFEFEFFF);
  Color get deepPurple5001 => Color(0XFFF0EDFF);

  // Gray
  Color get gray100 => Color(0XFFF4F4F4);
  Color get gray10001 => Color(0XFFF6F6F6);
  Color get gray10002 => Color(0XFFEEF4FD);
  Color get gray10003 => Color(0XFFF7F7F7);
  Color get gray10004 => Color(0XFFF5F5F5);
  Color get gray300 => Color(0XFFDBDBDB);
  Color get gray400 => Color(0XFFC0BFBF);
  Color get gray50 => Color(0XFFFFF1FB);
  Color get gray600 => Color(0XFF6B6B6B);
  Color get gray60028 => Color(0X28787880);
  Color get gray700 => Color(0XFF696969);
  Color get textfeild => Color(0XFFC0C0C0);

  Color get divider => Color(0XFFDCDCDC);

  // Green
  Color get greenA700 => Color(0XFF04B155);
  Color get green => Color(0XFF034752);

  // Indigo
  Color get indigo100 => Color(0XFFCDD1FA);
  Color get indigo400 => Color(0XFF656EC3);
  Color get indigo40001 => Color(0XFF5757D8);
  Color get indigo50 => Color(0XFFE3E6FF);
  Color get indigo5001 => Color(0XFFECECFF);
  Color get indigo800 => Color(0XFF283593);
  Color get indigoA200 => Color(0XFF5E82F8);

  // LightBlue
  Color get lightBlue50 => Color(0XFFDBF8FF);
  Color get lightBlue5001 => Color(0XFFD6F2FD);
  Color get lightBlue5002 => Color(0XFFD6ECFF);

  // Lime
  Color get lime900 => Color(0XFF86532F);
  Color get eyeColor => Color(0XFFFFE3E3);

  // Pink
  Color get pink300 => Color(0XFFED5A87);

  // Purple
  Color get purple200 => Color(0XFFDB8CD2);
  Color get purple50 => Color(0XFFF5ECFF);

  // Red
  Color get red100 => Color(0XFFFACDCF);
  Color get red400 => Color(0XFFE75757);
  Color get red50 => Color(0XFFFFF0EA);
  Color get red500 => Color(0XFFFF3D3D);
  Color get red50001 => Color(0XFFF14336);
  Color get red5001 => Color(0XFFFFECFB);
  Color get red5002 => Color(0XFFFFEBF0);
  Color get red700 => Color(0XFFD83636);
  // Color get deepOrange50 => Color(0XFFFFF3E0);
  // Color get deepPurple50 => Color(0XFFF5ECFF);
  // Color get red5002 => Color(0XFFFFEBEE);
  // Color get deepPurple5001 => Color(0XFFEDE7F6);
  // Color get eyeColor => Color(0XFFD1C4E9);
  // Color get indigo50 => Color(0XFFE8EAF6);
  // Color get gray50 => Color(0XFFFAFAFA);
  // Color get red50 => Color(0XFFFFEBEE);
  // Color get blue50 => Color(0XFFE3F2FD);
  // Color get lightBlue50 => Color(0XFFE1F5FE);
  Color get green50 => Color(0XFFE8F5E9);
  Color get teal50 => Color(0XFFE0F2F1);
  Color get orange50 => Color(0XFFFFF3E0);
  Color get amber50 => Color(0XFFFFF8E1);
  Color get cyan50 => Color(0XFFE0F7FA);
  Color get pink50 => Color(0XFFFCE4EC);
  Color get brown50 => Color(0XFFEFEBE9);
  Color get lime50 => Color(0XFFF9FBE7);
  Color get yellow50 => Color(0XFFFFFDE7);
  Color get blueGray50 => Color(0XFFECEFF1);
  // Color get purple50 => Color(0XFFF5ECFF);
  Color get cyan100 => Color(0XFFB2EBF2);
  // Color get indigo100 => Color(0XFFC5CAE9);
  Color get green100 => Color(0XFFC8E6C9);
  Color get orange100 => Color(0XFFFFE0B2);
  Color get brown100 => Color(0XFFD7CCC8);
  Color get yellow100 => Color(0XFFFFF9C4);
  Color get pink100 => Color(0XFFF8BBD0);
  Color get teal100 => Color(0XFFB2DFDB);
  // Color get blue100 => Color(0XFFBBDEFB);
  // Color get red100 => Color(0XFFFFCDD2);
  Color get lime100 => Color(0XFFF0F4C3);
  Color get deepOrange100 => Color(0XFFFFCCBC);
  Color get indigo200 => Color(0XFF9FA8DA);
  Color get green200 => Color(0XFFA5D6A7);
  Color get amber200 => Color(0XFFFFE082);
  // Color get purple200 => Color(0XFFCE93D8);
  Color get cyan200 => Color(0XFF80DEEA);
  Color get blueGray200 => Color(0XFFB0BEC5);
  Color get red200 => Color(0XFFEF9A9A);
  Color get lime200 => Color(0XFFE6EE9C);
  // Color get deepOrange200 => Color(0XFFFFAB91);
  Color get blue300 => Color(0XFF64B5F6);
  Color get green300 => Color(0XFF81C784);
  Color get amber300 => Color(0XFFFFD54F);
  Color get orange300 => Color(0XFFFFB74D);

  Color get error => Color(0XFFD93636);

  // White
  Color get whiteA700 => Color(0XFFFFFFFF);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
